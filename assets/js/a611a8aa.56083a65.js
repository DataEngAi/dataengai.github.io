"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1304],{5788:(e,n,t)=>{t.d(n,{Iu:()=>p,yg:()=>d});var r=t(1504);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(t),y=a,d=g["".concat(l,".").concat(y)]||g[y]||u[y]||i;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[g]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5916:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(5072),a=(t(1504),t(5788));const i={},o="DataSQRL Engines",s={unversionedId:"reference/operations/engines/overview",id:"reference/operations/engines/overview",title:"DataSQRL Engines",description:"An engine is a system or technology that executes part of the data pipeline compiled by DataSQRL.",source:"@site/docs/reference/operations/engines/overview.md",sourceDirName:"reference/operations/engines",slug:"/reference/operations/engines/overview",permalink:"/docs/reference/operations/engines/overview",draft:!1,editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/docs/reference/operations/engines/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Deploy",permalink:"/docs/reference/operations/deploy/overview"},next:{title:"Flink",permalink:"/docs/reference/operations/engines/flink"}},l={},c=[{value:"Stream Engine",id:"stream-engine",level:2},{value:"Database Engine",id:"database-engine",level:2},{value:"Server Engine",id:"server-engine",level:2},{value:"Cache Engine",id:"cache-engine",level:2}],p={toc:c},g="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.c)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"datasqrl-engines"},"DataSQRL Engines"),(0,a.yg)("p",null,"An ",(0,a.yg)("strong",{parentName:"p"},"engine")," is a system or technology that executes part of the data pipeline compiled by DataSQRL. "),(0,a.yg)("p",null,"Which engines DataSQRL compiles to is configured in the ",(0,a.yg)("a",{parentName:"p",href:"../../package-config"},"package configuration")," which also defines the data pipeline architecture. See the ",(0,a.yg)("a",{parentName:"p",href:"../../build"},"build documentation")," for more details."),(0,a.yg)("p",null,"DataSQRL supports 3 types of engines that play distinct roles in a data pipeline: stream engines, database engines, and server engines."),(0,a.yg)("h2",{id:"stream-engine"},"Stream Engine"),(0,a.yg)("p",null,"A stream engine is a stream processing system that can ingest data from external data sources, process the data, and pass the results to external data sinks."),(0,a.yg)("p",null,"DataSQRL currently supports the following stream engines:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"../flink"},"Apache Flink"),": Apache Flink is a fault-tolerant and scalable open-source stream processing engine. ")),(0,a.yg)("h2",{id:"database-engine"},"Database Engine"),(0,a.yg)("p",null,"A database engine reliably persists data for concurrent query access."),(0,a.yg)("p",null,"DataSQRL currently supports the following database engines:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"../postgres"},"Postgres"),": Postgres is an open-source relational database management system.")),(0,a.yg)("h2",{id:"server-engine"},"Server Engine"),(0,a.yg)("p",null,"A server engine efficiently processes data API requests, fetches the result set, and returns it."),(0,a.yg)("p",null,"DataSQRL currently supports the following server engines:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"../vertx"},"Vertx"),": Vertx is concurrent and asynchronous server engine for Java.")),(0,a.yg)("h2",{id:"cache-engine"},"Cache Engine"),(0,a.yg)("p",null,"Future development"))}u.isMDXComponent=!0}}]);