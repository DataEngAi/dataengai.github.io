"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6067],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),f=a,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},386:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},i="AVRO",s={unversionedId:"reference/sources/format/avro",id:"reference/sources/format/avro",title:"AVRO",description:"DataSQRL supports Avro as a data format and schema.",source:"@site/docs/reference/sources/format/avro.md",sourceDirName:"reference/sources/format",slug:"/reference/sources/format/avro",permalink:"/docs/reference/sources/format/avro",draft:!1,editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/docs/reference/sources/format/avro.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CSV",permalink:"/docs/reference/sources/format/csv"},next:{title:"DataSQRL Schema",permalink:"/docs/reference/sources/schema"}},c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Confluent Schema Registry",id:"confluent-schema-registry",level:2},{value:"Limitations",id:"limitations",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"avro"},"AVRO"),(0,a.kt)("p",null,"DataSQRL supports ",(0,a.kt)("a",{parentName:"p",href:"https://avro.apache.org/"},"Avro")," as a data format and schema."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="orders.table.json"',title:'"orders.table.json"'},'{\n  "type" : "source",\n  "canonicalizer" : "system",\n  "format" : {\n    "name" : "avro"\n  },\n  "name" : "orders",\n  "identifier" : "orders",\n  "schema" : "avro",\n  "connector" : {\n    "name" : "kafka",\n    "bootstrap.servers": "${sys:datasqrl.kafka_servers}",\n    "group.id": "datasqrl-orders"\n  }\n}\n')),(0,a.kt)("p",null,"Note, that ",(0,a.kt)("inlineCode",{parentName:"p"},"avro")," is specified as both the data type and schema for the source data."),(0,a.kt)("p",null,"DataSQRL expects an\nAVRO schema file with the same name as the table configuration. For our example ",(0,a.kt)("inlineCode",{parentName:"p"},"orders.table.json")," configuration, DataSQRL\nexpects an ",(0,a.kt)("inlineCode",{parentName:"p"},"orders.avsc")," file containing the AVRO schema for the table data."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"AVRO is not yet supported as a data sink format. We are working on that. ")),(0,a.kt)("h2",{id:"confluent-schema-registry"},"Confluent Schema Registry"),(0,a.kt)("p",null,"If you are using the Confluent schema registry for your AVRO schemas, configure the format as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  "format" : {\n    "name" : "avro-confluent"\n  },\n')),(0,a.kt)("p",null,"Note, that DataSQRL still expects the AVRO schema at compile time. You can download the most recent version from the\nschema registry and place it next to the table configuration file."),(0,a.kt)("h2",{id:"limitations"},"Limitations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DataSQRL does not support AVRO type unions with more than one non-null type. In other words, DataSQRL supports type definitions\nlike ",(0,a.kt)("inlineCode",{parentName:"li"},'"type": ["null", "double"]')," but not like ",(0,a.kt)("inlineCode",{parentName:"li"},'"type": ["null", "double", "int"]'),".")))}m.isMDXComponent=!0}}]);