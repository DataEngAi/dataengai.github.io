"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2945],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1099:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Access the API"},l="Accessing the API",p={unversionedId:"getting-started/intro/api",id:"getting-started/intro/api",title:"Access the API",description:"DataSQRL generates an API for the data service you define in the SQRL script. Let's play with those APIs to see how you can access the data from your application.",source:"@site/docs/getting-started/intro/api.md",sourceDirName:"getting-started/intro",slug:"/getting-started/intro/api",permalink:"/docs/getting-started/intro/api",editUrl:"https://github.com/dataengai/dataengai.github.io/edit/main/docs/docs/getting-started/intro/api.md",tags:[],version:"current",frontMatter:{title:"Access the API"},sidebar:"docs",previous:{title:"Implement SQRL Script",permalink:"/docs/getting-started/intro/sqrl"},next:{title:"Operating DataSQRL",permalink:"/docs/getting-started/intro/server"}},u={},d=[{value:"Retrieving Table Records",id:"retrieving-table-records",level:2},{value:"Custom Lookups",id:"custom-lookups",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Navigating Relationships",id:"navigating-relationships",level:2},{value:"Application Development",id:"application-development",level:2},{value:"Creating Query Templates",id:"creating-query-templates",level:3},{value:"Invoking Queries in Application",id:"invoking-queries-in-application",level:3},{value:"Subscriptions",id:"subscriptions",level:2},{value:"API Customization",id:"api-customization",level:2},{value:"Hide Elements",id:"hide-elements",level:3},{value:"Renaming",id:"renaming",level:3},{value:"Nested Pagination",id:"nested-pagination",level:3},{value:"Next Steps",id:"next-steps",level:2}],c={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"accessing-the-api"},"Accessing the API"),(0,i.kt)("p",null,"DataSQRL generates an API for the data service you define in the SQRL script. Let's play with those APIs to see how you can access the data from your application."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We will be accessing the generated GraphQL API. If you are new to the GraphQL API standard, take a quick look at the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/api/graphql-primer"},"GraphQL Primer"),"\nWe ",(0,i.kt)("a",{parentName:"p",href:"/docs/dev/roadmap#rest"},"are working")," on REST support."))),(0,i.kt)("h2",{id:"retrieving-table-records"},"Retrieving Table Records"),(0,i.kt)("p",null,"DataSQRL generates an API endpoint for each table defined in the SQRL script that has the same name as the table.\nThat'll be our starting point for any API request."),(0,i.kt)("p",null,"We have seen this ",(0,i.kt)("inlineCode",{parentName:"p"},"Products")," query a few times already:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    Products(id: "1") {\n        name\n        sizing\n        weight_in_grams\n    } \n}\n')),(0,i.kt)("p",null,"It asks for all products that have ",(0,i.kt)("inlineCode",{parentName:"p"},"id=1")," and returns the product's ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sizing"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"weight_in_grams"),"."),(0,i.kt)("p",null,"The easiest way to test GraphQL queries is through the GraphiQL IDE in your browser. Open the URL ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost:7050/graphiql/"),", enter queries you want to run on the left side, hit the run button, and observe the result on the right."),(0,i.kt)("p",null,"GraphiQL is also useful for developing your own API queries. It provides auto-completion, syntax highlighting, and a schema browser that allows you to explore the API."),(0,i.kt)("h3",{id:"custom-lookups"},"Custom Lookups"),(0,i.kt)("p",null,'You can use the query endpoints to return records from the underlying table by matching column values or filter condition. For example, we can query for all products of type "Nuts" that weight more than 1000 grams:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    Products(type: "Nuts", weight_in_gram: {larger: 1000}) {\n        name\n        weight_in_gram\n    } \n}\n')),(0,i.kt)("h3",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,"To query for all products, you remove any argument that constrains the result set, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"Products() {...}")," . That's a lot of results, however. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," arguments to navigate through large result sets:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    Products(limit: 20, offset: 10) {\n        name\n    } \n}\n")),(0,i.kt)("p",null,"This limits the number of returned products to 20 starting at position 10 in the complete list of results. DataSQRL also supports ",(0,i.kt)("a",{parentName:"p",href:"./advanced#pagination"},"cursor-style navigation")," (as used by Relay, for example)."),(0,i.kt)("h3",{id:"ordering"},"Ordering"),(0,i.kt)("p",null,'We can also control the order in which results are returned. To have the results of our previous "give me all nuts that are heavier than 1000 grams" query returned in the order of increasing weight, we add the ',(0,i.kt)("inlineCode",{parentName:"p"},"order")," argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    Products(type: "Nuts", weight_in_gram: {larger: 1000},\n             order: {weight_in_gram: ASC}) {\n        name\n        weight_in_gram\n    } \n}\n')),(0,i.kt)("h2",{id:"navigating-relationships"},"Navigating Relationships"),(0,i.kt)("p",null,"One of the benefits of defining relationships in SQRL is that we can navigate those relationships in the API and retrieve related records of data. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    Customers(id: "50") {\n        purchases(ftime: {after: "2022-02-01"}, order: {time: DESC}, limit:100 ) {\n            id\n            time\n            items(limit: 50) {\n                quantity\n                product {\n                    name\n                    weight_in_grams\n                }\n            }\n        }\n    } \n}\n')),(0,i.kt)("p",null,"This queries navigates multiple relationships to fetch all the data we need to show a customer's purchase history of the last month. Let's dissect it. \\\nAt the top level, we are using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Customers")," endpoint to query for the customer with ",(0,i.kt)("inlineCode",{parentName:"p"},"id=50"),". We then navigate through the ",(0,i.kt)("inlineCode",{parentName:"p"},"purchases")," relationship and filter out all orders that were placed before February (i.e. last month). In addition, we want those purchases ordered by time decreasing and only fetch up to 100 of them. For each purchase order, we navigate through the ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," relationship to fetch up to 50 nested order items. And for each order item, we navigate through the ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," relationship to get the product information for the ordered product."),(0,i.kt)("p",null,"Relationships allow us to construct complex queries which return all the data we need in a single request. We don't have to stitch our desired result set together by querying multiple tables. That saves you a ton of time and is also a lot faster."),(0,i.kt)("p",null,"When you navigate through a relationship, you can filter records and use ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," in the same way you would when querying a table at the top level to specify which related records you want to be returned, in what order, and how many of them."),(0,i.kt)("p",null,"Note, that these arguments are applied locally for each record that is returned. In the query above, ",(0,i.kt)("inlineCode",{parentName:"p"},"items(limit: 50)")," means that we are asking for up to 50 order items ",(0,i.kt)("em",{parentName:"p"},"for each")," purchase order and not 50 total for the entire request. Since this query can return up to 100 purchase orders, the result of this request could potentially return 5000 order items total in the worst case. \\\nAs we navigate through relationships, we need to keep in mind that result set cardinalities multiply and choose small enough page sizes to avoid huge responses from the server."),(0,i.kt)("h2",{id:"application-development"},"Application Development"),(0,i.kt)("p",null,"Once we designed the queries we need, it's time to call them from our application."),(0,i.kt)("h3",{id:"creating-query-templates"},"Creating Query Templates"),(0,i.kt)("p",null,"The first step is to take our queries and convert them to generic query templates. For instance, we take the query for a customer's recent purchase history, give it a name, and introduce variables for those query conditions we want to set in our application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query GetRecentPurchases($customerid: Int!, $after: DateTime!) {\n    Customers(id: $customerid) {\n        purchases(time: {after: $after}, order: {time: DESC}, limit:100 ) {\n            id\n            time\n            items(pageSize: 50) {\n                quantity\n                product {\n                    name\n                    weight_in_grams\n                }\n            }\n        }\n    } \n}\n")),(0,i.kt)("p",null,"This is the exact same query we build above with two differences:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We gave it the name ",(0,i.kt)("inlineCode",{parentName:"li"},"GetRecentPurchases")," so we can reference it from our application."),(0,i.kt)("li",{parentName:"ol"},"We introduced the variables ",(0,i.kt)("inlineCode",{parentName:"li"},"$customerid")," for the customer id and ",(0,i.kt)("inlineCode",{parentName:"li"},"$after"),"for the date we are filtering customer purchases on. We will set those variables in the application code.")),(0,i.kt)("p",null,"Create a sub-folder ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," in the folder where you created the customer 360 SQRL script and save the query template above in a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"queries/GetRecentPurchases.graphql"),". We store each of the query patterns we want to invoke from our application in a separate file that has the name of the query. That makes it obvious where things are and easy to develop."),(0,i.kt)("h3",{id:"invoking-queries-in-application"},"Invoking Queries in Application"),(0,i.kt)("p",null,"You can now use the query templates to retrieve data from the API in the programming language of your choice. \\\nWe are going to build a little react app in Javascript, but take a look at ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/api/graphql-jvm"},"Querying in JVM/Android")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/api/graphql-ios"},"Querying in iOS"),"\nto see how to query the API from a JVM based language (e.g. Android or Kotlin) or an iOS application. You can invoke the DataSQRL generated GraphQL API from any programming language with a GraphQL client."),(0,i.kt)("p",null,"If you don't have the ",(0,i.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/"},"Apollo GraphQL client")," and GraphQL support installed yet, let's get that out of the way first:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @apollo/client graphql\n")),(0,i.kt)("p",null,"Create the Javascript file ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," in the same folder as the customer360.sqrl script and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { render } from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\nimport recentPurchasesQuery from 'queries/GetRecentPurchases.graphql';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:7050/graphql/customer360/v0',\n  cache: new InMemoryCache()\n});\n")),(0,i.kt)("p",null,"We import React, the Apollo GraphQL client, and our query. Then we connect the client to the DataSQRL GraphQL API. Importing GraphQL query templates requires a Webpack loader. Add the following rule to your webpack config file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"module: {\n  rules: [\n    {\n      test: /\\.(graphql|gql)$/,\n      exclude: /node_modules/,\n      loader: 'graphql-tag/loader',\n    },\n  ],\n},\n")),(0,i.kt)("p",null,"With all this setup out of the way, let's build a React component that displays the purchase history for a customer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function Purchase({id, time, items}) {\n    return (\n        <div>\n        <h2>Order No. {id}</h2>\n        <p>Order placed on {time}</p>\n        <h3>Order Entries</h3>\n        {items.map((props, idx) => (\n            <Entry key={idx} {...props} />\n        ))}\n        </div>\n    );\n}\n\nfunction Entry({quantity, product}) {\n    return (\n        <div>\n        <p>{quantity} {product.name}</p>\n        </div>\n    );\n}\n\nfunction PurchaseHistory({customerid}) {\n  const dayInMillis = 24*60*60*1000;\n  const after = new Date(new Date().getTime() - 31*dayInMillis).toLocaleDateString()\n  const { loading, error, data } = useQuery(recentPurchasesQuery, {\n    variables : { customerid, after }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.items.map((props, idx) => (\n     <Purchase key={idx} {...props} />\n  ));\n}\n\n")),(0,i.kt)("p",null,"We defined 3 React components: ",(0,i.kt)("inlineCode",{parentName:"p"},"Purchase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Entry"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"PurchaseHistory"),". The first two components wrap each order record and each item record into HTML. The real action is in ",(0,i.kt)("inlineCode",{parentName:"p"},"PurchaseHistory")," where we invoke the method ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," to submit the imported ",(0,i.kt)("inlineCode",{parentName:"p"},"recentPurchasesQuery")," against the API via the configured client. We submit the variables ",(0,i.kt)("inlineCode",{parentName:"p"},"customerid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," with the query. We compute ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," as the date that's 31 days prior to now whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"customerid")," is an attribute of the component."),(0,i.kt)("p",null,"To wrap up our simple React application, we are going to define a React component that represents the entire webpage and contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"PurchaseHistory")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function Customer360() {\n  return (\n    <div>\n      <h2>Customer 360</h2>\n      <ExchangeRates customerid=50 />\n    </div>\n  );\n}\n\nrender(\n  <ApolloProvider client={client}>\n    <Customer360 />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n")),(0,i.kt)("p",null,"The render method connects the GraphQL client to React and renders all the components."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"How do you run this?")),(0,i.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"sqrl"},"last section"),", we defined the subscription event table ",(0,i.kt)("inlineCode",{parentName:"p"},"NewCustomerPromotion")," to trigger an event whenever a customer spent more than $100 dollars with our nut shop."),(0,i.kt)("p",null,"Subscriptions allow us to pass such events to other systems that need to be notified. We use the generated API to ",(0,i.kt)("em",{parentName:"p"},"pull")," data out of DataSQRL and subscriptions to ",(0,i.kt)("em",{parentName:"p"},"push")," data out to other systems."),(0,i.kt)("p",null,"Before we can push data somewhere, we need to define a ",(0,i.kt)("em",{parentName:"p"},"data sink")," to push data into. Data sinks are similar to data sources, but instead of being a system where we read data from it is a system we write data to. DataSQRL provides support for different types of sinks: queues, database, filesystem, and cloud storage."),(0,i.kt)("p",null,"We are going to connect a filesystem sink to our DataSQRL server which writes subscription events to a file on disk inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," folder in the current directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"datasqrl sink folder output\n")),(0,i.kt)("p",null,"You'll see the following response to confirm a successful connection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Connected sink "output" to DataSQRL server "localhost:7050"\n')),(0,i.kt)("p",null,"To link the  ",(0,i.kt)("inlineCode",{parentName:"p"},"NewCustomerPromotion")," subscription in our Customer 360 script to ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," sink we just connected, we create a small configuration file called ",(0,i.kt)("inlineCode",{parentName:"p"},"subscriptions.json")," in the same folder as our script with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "subscription": "NewCustomerPromotion",\n    "sinks" : [{ "name" :  "output" }]\n  }\n]\n')),(0,i.kt)("p",null,"If you are running the ",(0,i.kt)("inlineCode",{parentName:"p"},"customer360.sqrl")," script in development mode, interrupt the process by pressing ",(0,i.kt)("inlineCode",{parentName:"p"},"CTRL-C"),". Then restart it with the subscription configuration as an argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"datasqrl watch customer360.sqrl -s subscriptions.json\n")),(0,i.kt)("p",null,"This runs our script in development with the subscription linked to the file sink. If you wait a few seconds for the server to process the script, you will see the file ",(0,i.kt)("inlineCode",{parentName:"p"},"newcustomerpromotion.json")," appear in the ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," folder with json records for each customer that has spent more than $100 with us."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Subscriptions in the GraphQL API are currently ",(0,i.kt)("a",{parentName:"p",href:"/docs/dev/roadmap#graphqlsubs"},"on the roadmap"),"."))),(0,i.kt)("h2",{id:"api-customization"},"API Customization"),(0,i.kt)("p",null,"DataSQRL automatically generates the GraphQL API using the names of the tables, columns, and relationships you define the SQRL script. Often, that's good enough. Sometimes you want to overwrite those defaults to customize the API. Let's talk about the most common customizations."),(0,i.kt)("h3",{id:"hide-elements"},"Hide Elements"),(0,i.kt)("p",null,"Tables, columns, and relationships with names that start with an underscore ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," are not visible in the API. This allows you to define elements that are only accessible inside your script."),(0,i.kt)("p",null,"For our recommendation engine, we defined the column ",(0,i.kt)("inlineCode",{parentName:"p"},"recent_avg_protein")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"Customers")," so we could sort products by their similarity in protein content. We use that column only for our internal computation and don't want to expose it through the API. Hence, we should rename it to ",(0,i.kt)("inlineCode",{parentName:"p"},"_recent_avg_protein")," (remember to also rename it inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"products_by_protein")," nested table definition). When you save the script, the field will disappear from the API."),(0,i.kt)("h3",{id:"renaming"},"Renaming"),(0,i.kt)("p",null,"When you define a table, column, or relationship you can add an ",(0,i.kt)("inlineCode",{parentName:"p"},"@api")," annotation to specify the name that appears in the generated API for that element. Annotations are added above the statement they apply to as an SQL comment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sqrl"},'-- @api(name="Product", query="getproducts")\nProducts := DISTINCT Products ON id ORDER BY _ingest_time DESC;\n')),(0,i.kt)("p",null,"This annotation changes the name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Products")," type in the GraphQL API to ",(0,i.kt)("inlineCode",{parentName:"p"},"Product")," (singluar). For tables, we can also specify the name of the query endpoint used to query the table."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sqrl"},'-- @api(name="Product", query="getproducts")\nProducts := DISTINCT Products ON id ORDER BY _ingest_time DESC;\n')),(0,i.kt)("p",null,"Save the script and you'll see both the query and type name change in the generated GraphQL API."),(0,i.kt)("h3",{id:"nested-pagination"},"Nested Pagination"),(0,i.kt)("p",null,"The generated API does not provide nested pagination by default. That makes it simpler to query the API. But sometimes there are too many items returned when you navigate a relationship or query a nested table. In those cases, you can explicity enable pagination with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@api")," annotation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sqrl"},"-- @api(paginate=true)\nCustomers.products_by_protein :=\n        SELECT p.id AS productid, ABS(p.nutrition.protein-_._recent_avg_protein) AS protein_difference FROM Products p\n        ORDER BY protein_difference ASC LIMIT 20;\n")),(0,i.kt)("p",null,"This annotation enables pagination for the nested ",(0,i.kt)("inlineCode",{parentName:"p"},"products_by_protein")," table. When you refresh the API you can see that the ",(0,i.kt)("inlineCode",{parentName:"p"},"products_by_protein")," field on ",(0,i.kt)("inlineCode",{parentName:"p"},"Customers")," returns a page with ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pageInfo")," fields. "),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"You've built a small Customer 360 application in React and explored how to query the flexible GraphQL API that DataSQRL generates to get the result sets you need. You are ready to build application with DataSQRL. Before you run off and build a billion dollar app, take a quick look at the next section on ",(0,i.kt)("a",{parentName:"p",href:"server"},"how to operate DataSQRL server"),"."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"If you want to learn more about querying the API, here are a couple of resources you might find helpful:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/api/graphql-api"},"API reference documentation")," has all the details on the structure, query endpoints, and arguments of the generated GraphQL API."),(0,i.kt)("li",{parentName:"ul"},"Learn how to query the API from ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/api/graphql-jvm"},"JVM/Android")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/api/graphql-ios"},"iOS")," applications."),(0,i.kt)("li",{parentName:"ul"},"Learn more about ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/sqrl/table#subscriptions"},"subscriptions")," and how to ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/api/subscriptions"},"feed subscriptions to data sinks"),"."),(0,i.kt)("li",{parentName:"ul"},"The list of ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/sources/overview#sinks"},"supported data sinks")," in DataSQRL links to guides on how to connect various types of sinks to DataSQRL.")))}h.isMDXComponent=!0}}]);