"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8080],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>d});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=c(t),y=a,d=u["".concat(s,".").concat(y)]||u[y]||p[y]||o;return t?r.createElement(d,i(i({ref:n},g),{},{components:t})):r.createElement(d,i({ref:n},g))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},9159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={title:"JSON Functions"},i="Text Functions",l={unversionedId:"reference/sqrl/functions/json",id:"reference/sqrl/functions/json",title:"JSON Functions",description:"The json function package contains functions for creating, querying, and manipulating JSON objects.",source:"@site/docs/reference/sqrl/functions/json.md",sourceDirName:"reference/sqrl/functions",slug:"/reference/sqrl/functions/json",permalink:"/docs/reference/sqrl/functions/json",draft:!1,editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/docs/reference/sqrl/functions/json.md",tags:[],version:"current",frontMatter:{title:"JSON Functions"},sidebar:"docs",previous:{title:"Secure Functions",permalink:"/docs/reference/sqrl/functions/secure"},next:{title:"Vector Functions",permalink:"/docs/reference/sqrl/functions/vector"}},s={},c=[{value:"Reference",id:"reference",level:2}],g={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"text-functions"},"Text Functions"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," function package contains functions for creating, querying, and manipulating JSON objects."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"IMPORT json.*; -- imports all functions\nIMPORT json.toJson; -- imports single function\n")),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Function Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonExtract(json, String, Any)")),(0,a.yg)("td",{parentName:"tr",align:null},"Extracts a value from a JSON object based on a JSON path specification. Returns the value at the specified path, or a default value if the path is not found or in case of an error. Useful for navigating complex JSON structures.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ToJson(Any)")),(0,a.yg)("td",{parentName:"tr",align:null},"Converts a given input into a ",(0,a.yg)("inlineCode",{parentName:"td"},"json")," object. This conversion is useful for facilitating JSON manipulations within Flink data flows. Can handle inputs like strings representing JSON, other JSON objects, or various scalar values to create JSON structures.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonToString(json)")),(0,a.yg)("td",{parentName:"tr",align:null},"Converts a ",(0,a.yg)("inlineCode",{parentName:"td"},"json")," JSON object back to a string representation. Useful for outputting or exporting JSON data after transformations within Flink.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonConcat(json, json)")),(0,a.yg)("td",{parentName:"tr",align:null},"Merges two JSON objects, combining all key-value pairs from both. Useful for aggregating data from different JSON sources into a single JSON structure.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonObject(Any...)")),(0,a.yg)("td",{parentName:"tr",align:null},"Creates a JSON object from provided key-value pairs. Each pair consists of a string key and a value which can be any type, forming a JSON object dynamically.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonArray(Any...)")),(0,a.yg)("td",{parentName:"tr",align:null},"Constructs a JSON array from given elements of any type. This function allows for dynamic JSON array creation, accommodating a variety of data types.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonQuery(json, String)")),(0,a.yg)("td",{parentName:"tr",align:null},"Executes a JSON path query on a JSON object and returns the query result as a JSON string. Ideal for extracting specific data from nested JSON structures.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonExists(json, String)")),(0,a.yg)("td",{parentName:"tr",align:null},"Evaluates whether a specified JSON path exists within a JSON object, returning a boolean indicating presence or absence of the path.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonArrayAgg(Any...)")),(0,a.yg)("td",{parentName:"tr",align:null},"Aggregates multiple values into a JSON array during a group by operation. Can handle various types of input to dynamically build a JSON array.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonObjectAgg(String, Any...)")),(0,a.yg)("td",{parentName:"tr",align:null},"Similar to ",(0,a.yg)("inlineCode",{parentName:"td"},"JsonArrayAgg")," but for JSON objects, aggregating key-value pairs into a JSON object during group operations, handling complex aggregation logic with JSON structures.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"JsonConcat(json...)")),(0,a.yg)("td",{parentName:"tr",align:null},"An extended function to concatenate multiple JSON objects into one, merging them by adding all key-value pairs from each JSON into a single object.")))))}p.isMDXComponent=!0}}]);