"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[744],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=s(a),m=i,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=m;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[u]="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9598:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const o={slug:"simplifying-flink-app-development",title:"Simplifying Apache Flink Application Development with DataSQRL",authors:["matthias"],tags:["DataSQRL","Flink"]},l="Simplifying Apache Flink Application Development with DataSQRL",r={permalink:"/blog/simplifying-flink-app-development",editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/blog/2023-06-21-simplifying-flink-app-development.md",source:"@site/blog/2023-06-21-simplifying-flink-app-development.md",title:"Simplifying Apache Flink Application Development with DataSQRL",description:"Apache Flink is an incredibly powerful stream processor. But to build a complete application with Flink you need to integrate multiple complex technologies which requires a significant amount of custom code.",date:"2023-06-21T00:00:00.000Z",formattedDate:"June 21, 2023",tags:[{label:"DataSQRL",permalink:"/blog/tags/data-sqrl"},{label:"Flink",permalink:"/blog/tags/flink"}],readingTime:4.46,hasTruncateMarker:!0,authors:[{name:"Matthias Broecheler",title:"CEO of DataSQRL",url:"https://github.com/mbroecheler",imageURL:"/img/headshots/matthias1.png",key:"matthias"}],frontMatter:{slug:"simplifying-flink-app-development",title:"Simplifying Apache Flink Application Development with DataSQRL",authors:["matthias"],tags:["DataSQRL","Flink"]},prevItem:{title:"Why Apache Flink and GraphQL Are like Peanut Butter and Jelly",permalink:"/blog/flink-graphql-peanut-butter-jelly"},nextItem:{title:"SQRL: Enhancing SQL to a High-Level Data Language",permalink:"/blog/sqrl-high-level-data-language-sql"}},p={authorsImageUrls:[void 0]},s=[{value:"The Challenge of Building Applications with Flink",id:"the-challenge-of-building-applications-with-flink",level:2},{value:"Introducing DataSQRL: A Solution for Streamlined Flink Development",id:"introducing-datasqrl-a-solution-for-streamlined-flink-development",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Apache Flink is an incredibly powerful stream processor. But to build a complete application with Flink you need to integrate multiple complex technologies which requires a significant amount of custom code.\nDataSQRL is an open-source tool that simplifies this process by compiling SQL into a data pipeline that integrates Flink, Kafka, Postgres, and API layer. "),(0,i.kt)("div",{style:{float:"right",width:"40%"}},(0,i.kt)("iframe",{width:"100%",height:"100%",src:"https://www.youtube.com/embed/mf5q-IdbVQY",title:"DataSQRL Introduction",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,i.kt)("p",null,"DataSQRL allows you to focus on your application logic without getting bogged down in the details of how to execute your data transformations efficiently across multiple technologies."),(0,i.kt)("h2",{id:"the-challenge-of-building-applications-with-flink"},"The Challenge of Building Applications with Flink"),(0,i.kt)("p",null,"We have built several applications in Flink: recommendation engines, data mesh endpoints, monitoring dashboards, Customer 360 APIs, smart IoT apps, and more. Across those use cases, Flink proved to be versatile and powerful in its ability to instantly analyze and aggregate data from multiple sources. But we found it quite difficult and time-consuming to build applications with Flink."),(0,i.kt)("img",{src:"/img/reference/compiledMicroservice.svg",alt:"DataSQRL compiled data pipeline >",width:"50%"}),(0,i.kt)("p",null,"To start, you need to learn Flink: the table and datastream API, watermarking, windowing, and all the other stream processing concepts. Flink alone gets our heads spinning. And Flink is just one component of the application."),(0,i.kt)("p",null,"To build a complete data pipeline, you need Kafka to hold your streaming data and a database like Postgres to query the processed data. On top, you need an API layer that captures input data and provides access to the processed data. Your team must learn, implement, and integrate multiple complex technologies. It takes a village to build a Flink app."),(0,i.kt)("h2",{id:"introducing-datasqrl-a-solution-for-streamlined-flink-development"},"Introducing DataSQRL: A Solution for Streamlined Flink Development"),(0,i.kt)("img",{src:"/img/full_squirrel.svg",alt:"DataSQRL >",width:"20%"}),(0,i.kt)("p",null,"That\u2019s why we built ",(0,i.kt)("a",{parentName:"p",href:"/"},"DataSQRL"),". DataSQRL compiles the SQL that defines your data processing into an integrated data pipeline that orchestrates Flink, Kafka, Postgres, and API - saving us a ton of time and headache in the process. Why not let the computer do all the hard work?"),(0,i.kt)("p",null,"Let me show you how DataSQRL works by building an IoT monitoring service."))}d.isMDXComponent=!0}}]);