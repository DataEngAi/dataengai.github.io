"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1361],{5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>g});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,g=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9365:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(6540),r=a(53);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:a},t)}},1470:(e,t,a)=>{a.d(t,{A:()=>N});var n=a(8168),r=a(6540),i=a(53),l=a(3104),s=a(6347),o=a(7485),p=a(1682),u=a(9466);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=d(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[o,p]=g({queryString:a,groupId:n}),[c,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,u.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),y=(()=>{const e=o??c;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),h(e)}),[p,h,i]),tabValues:i}}var y=a(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:s,selectValue:o,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==s&&(c(t),o(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,i.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":s===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,i.A)("tabs-container",f.tabList)},r.createElement(b,(0,n.A)({},e,t)),r.createElement(v,(0,n.A)({},e,t)))}function N(e){const t=(0,y.A)();return r.createElement(w,(0,n.A)({key:String(t)},e))}},5760:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=a(8168),r=(a(6540),a(5680)),i=a(1470),l=a(9365);const s={title:"Metrics Processing"},o="DataSQRL Quickstart in 10 Minutes",p={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",title:"Metrics Processing",description:'|" width="35%"/>',source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/docs/getting-started/quickstart",draft:!1,editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/docs/getting-started/quickstart.md",tags:[],version:"current",frontMatter:{title:"Metrics Processing"},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/getting-started/"},next:{title:"Metrics Processing",permalink:"/docs/getting-started/quickstart"}},u={},c=[{value:"Create Script",id:"create-script",level:2},{value:"Compile the Script",id:"run",level:2},{value:"Run the Script",id:"run",level:2},{value:"Query API",id:"query",level:2},{value:"Customize API",id:"customize-api",level:2},{value:"Ingest Metrics with Mutations",id:"ingest-metrics-with-mutations",level:2},{value:"Realtime Updates with Subscriptions",id:"subscription",level:2}],d={toc:c},m="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(m,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"datasqrl-quickstart-in-10-minutes"},"DataSQRL Quickstart in 10 Minutes"),(0,r.yg)("img",{src:"/img/getting-started/squirrel_computer.jpeg",alt:"Metrics Monitoring Quickstart >|",width:"35%"}),(0,r.yg)("p",null,"We are going to build a data pipeline that analyzes sensor metrics in 10 minutes. Tik tok, let's go!"),(0,r.yg)("h2",{id:"create-script"},"Create Script"),(0,r.yg)("p",null,"First, we are going to define the metrics processing for our data product using SQL."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"If you are unfamiliar with SQL, we recommend you read our ",(0,r.yg)("a",{parentName:"p",href:"/docs/reference/sqrl/sql-primer"},"SQL Primer")," first.")),(0,r.yg)("p",null,"In the terminal or command line, create an empty folder for the SQL script:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"> mkdir metrics; cd metrics\n")),(0,r.yg)("p",null,"Then create a new file called ",(0,r.yg)("inlineCode",{parentName:"p"},"metrics.sqrl")," and copy-paste the following SQL code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql",metastring:"title=metrics.sqrl",title:"metrics.sqrl"},"IMPORT datasqrl.example.sensors.SensorReading; -- Import metrics\nIMPORT time.endOfSecond;  -- Import time function\n/* Aggregate sensor readings to second */\nSecReading := SELECT sensorid, endOfSecond(time) as timeSec,\n                     avg(temperature) as temp \n              FROM SensorReading GROUP BY sensorid, timeSec;\n/* Get max temperature in last minute per sensor */\nSensorMaxTemp := SELECT sensorid, max(temp) as maxTemp\n                 FROM SecReading\n                 WHERE timeSec >= now() - INTERVAL 1 MINUTE\n                 GROUP BY sensorid;\n")),(0,r.yg)("p",null,'DataSQRL\'s flavor of SQL is called "SQRL", which defines tables using the ',(0,r.yg)("inlineCode",{parentName:"p"},":=")," assignment operator and supports explicit data and function imports."),(0,r.yg)("p",null,"In the script, we import the sensor data we are processing and a time function we use for aggregation."),(0,r.yg)("p",null,"We define the ",(0,r.yg)("inlineCode",{parentName:"p"},"SecReading")," table that aggregates all sensor metrics within one second to smooth our temperature readings.\nWe define another table ",(0,r.yg)("inlineCode",{parentName:"p"},"SensorMaxTemp")," which computes the maximum temperature in the last minute for each sensor."),(0,r.yg)("h2",{id:"run"},"Compile the Script"),(0,r.yg)("p",null,"DataSQRL compiles our SQRL script into an integrated data pipeline with the following command:"),(0,r.yg)(i.A,{groupId:"cli",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Mac",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sqrl compile metrics.sqrl\n"))),(0,r.yg)(l.A,{value:"Docker",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v $PWD:/build datasqrl/cmd compile metrics.sqrl\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"To run this command you need to have ",(0,r.yg)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," installed on your machine and running. The first time you run this command takes an eternity to download. Make sure you are using docker compose V2.")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"If you are using Powershell on Windows, you need to replace ",(0,r.yg)("inlineCode",{parentName:"p"},"$PWD")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"${PWD}")," to reference your local directory in the docker command.")))),(0,r.yg)("h2",{id:"run"},"Run the Script"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose up --build -d)\n")),(0,r.yg)("p",null,"Once the pipeline is running, it will ingest, process, store, and serve the data through an API."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"We'll start up postgres, flink, kafka, and a graphql server. You may have other services running which could cause port conflicts.")),(0,r.yg)("h2",{id:"query"},"Query API"),(0,r.yg)("p",null,"Open your favorite browser and navigate to ",(0,r.yg)("a",{parentName:"p",href:"http://localhost:8888//graphiql/"},(0,r.yg)("inlineCode",{parentName:"a"},"http://localhost:8888/graphiql/"))," to access GraphiQL - a popular GraphQL IDE. Write GraphQL queries in the left-hand panel. For example, copy the following query:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"{\n  SensorMaxTemp(sensorid: 1) {\n    maxTemp\n  }\n}\n")),(0,r.yg)("p",null,'When you hit the "run" button you get the maximum temperature for the sensor with id ',(0,r.yg)("inlineCode",{parentName:"p"},"1")," in the last minute."),(0,r.yg)("p",null,"And there you have it: a running data pipeline that ingests metrics, aggregates them, and exposes the results through a GraphQL API which you can call in your applications."),(0,r.yg)("p",null,"To stop the pipeline, interrupt it with ",(0,r.yg)("inlineCode",{parentName:"p"},"CTRL-C")," and run ",(0,r.yg)("inlineCode",{parentName:"p"},"(cd build/deploy; docker compose down -v)"),"."),(0,r.yg)("h2",{id:"customize-api"},"Customize API"),(0,r.yg)("p",null,"Got a little more time? Let's customize the GraphQL API and add a metrics ingestion endpoint."),(0,r.yg)("p",null,"By default, DataSQRL generates a GraphQL schema for us based on the tables we define in the SQRL script. That's great for rapid prototyping, but eventually we want to customize the API and limit data access."),(0,r.yg)("p",null,"To save us time, we are going to start with the GraphQL API that DataSQRL generates for us by running this command:"),(0,r.yg)(i.A,{groupId:"cli",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Mac",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sqrl compile metrics.sqrl --api graphql\n"))),(0,r.yg)(l.A,{value:"Docker",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -v $PWD:/build datasqrl/cmd compile metrics.sqrl --api graphql\n")))),(0,r.yg)("p",null,"There is now a file called ",(0,r.yg)("inlineCode",{parentName:"p"},"schema.graphqls")," in the same folder as our script. Open it and take a look."),(0,r.yg)("p",null,"Notice, how each table defined in our SQRL script maps to a query endpoint in the API and an associated result type. The query endpoints accept arguments for each column of the table to filter the results by column values."),(0,r.yg)("p",null,"We are going to remove most of those arguments to only support querying by ",(0,r.yg)("inlineCode",{parentName:"p"},"sensorid"),". We will also remove the ",(0,r.yg)("inlineCode",{parentName:"p"},"SensorReading")," query endpoint and result type to only expose the smoothed-out sensor readings from the ",(0,r.yg)("inlineCode",{parentName:"p"},"SecReading")," table."),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"schema.graphqls")," file, remove the ",(0,r.yg)("inlineCode",{parentName:"p"},"SensorReading")," type and replace the query definition with the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:"title=metricsapi.graphqls",title:"metricsapi.graphqls"},"type Query {\n  SecReading(sensorid: Int!): [SecReading!]\n  SensorMaxTemp(sensorid: Int): [SensorMaxTemp!]\n}\n")),(0,r.yg)("p",null,"Note, that we made ",(0,r.yg)("inlineCode",{parentName:"p"},"sensorid")," a required argument for the ",(0,r.yg)("inlineCode",{parentName:"p"},"SecReading")," query endpoint."),(0,r.yg)("p",null,"Now, invoke the compiler with the GraphQL schema we just created and launch the updated pipeline:"),(0,r.yg)(i.A,{groupId:"cli",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Mac",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sqrl compile metrics.sqrl schema.graphqls\n"))),(0,r.yg)(l.A,{value:"Docker",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v $PWD:/build datasqrl/cmd compile metrics.sqrl schema.graphqls\n")))),(0,r.yg)("p",null,"Followed By:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose up --build -d)\n")),(0,r.yg)("p",null,"When you refresh GraphiQL in the browser, you see that the API is simpler and only exposes the data for our use case."),(0,r.yg)("h2",{id:"ingest-metrics-with-mutations"},"Ingest Metrics with Mutations"),(0,r.yg)("p",null,"So far, we have ingested metrics data from an external source imported from the ",(0,r.yg)("a",{parentName:"p",href:"http://dev.datasqrl.com"},"DataSQRL repository"),". The data source is static which is convenient for whipping up an example data product, but we want our data pipeline to provide a metrics ingestion endpoint."),(0,r.yg)("p",null,"No problem, let's add it to our GraphQL schema by appending the following mutation to the ",(0,r.yg)("inlineCode",{parentName:"p"},"schema.graphqls")," file we created above"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:"title=schema.graphqls",title:"schema.graphqls"},"type Mutation {\n  AddReading(metric: SensorReadingInput!): CreatedReading\n}\n\ninput SensorReadingInput {\n  sensorid: Int!\n  temperature: Float!\n  humidity: Float!\n}\n\ntype CreatedReading {\n  event_time: String!\n  sensorid: Int!\n}\n")),(0,r.yg)("p",null,"To use the data created by this mutation in our SQRL script, we have to import it. Replace the first three lines of the ",(0,r.yg)("inlineCode",{parentName:"p"},"metrics.sqrl")," script with:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql",metastring:"title=metrics.sqrl",title:"metrics.sqrl"},"IMPORT schema.AddReading AS SensorReading;\nIMPORT time.endOfSecond;\nSecReading := SELECT sensorid, endOfSecond(event_time) as timeSec,\n                     avg(temperature) as temp \n              FROM SensorReading GROUP BY sensorid, timeSec;\n")),(0,r.yg)("p",null,"We are now using data ingested through the API mutation endpoint instead of the static example data. And for the timestamp on the metrics, we are using the special column ",(0,r.yg)("inlineCode",{parentName:"p"},"event_time")," which captures the time data was ingested through the API."),(0,r.yg)("p",null,"Terminate the running service, run the compiler again, and re-launch the pipeline."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose down -v)\n")),(0,r.yg)(i.A,{groupId:"cli",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Mac",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sqrl compile metrics.sqrl schema.graphqls\n"))),(0,r.yg)(l.A,{value:"Docker",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v $PWD:/build datasqrl/cmd compile metrics.sqrl schema.graphqls\n")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose up --build -d)\n")),(0,r.yg)("p",null,"In GraphiQL, run the following mutation to add a temperature reading:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  AddReading(metric: {\n    sensorid: 1,\n    temperature: 37.2,\n    humidity: 88\n  }) {\n    sensorid\n    event_time\n  }\n}\n")),(0,r.yg)("p",null,"Hit the run button a few times and change the temperature and/or sensor id to insert multiple readings."),(0,r.yg)("p",null,"To query the maximum temperatures, run the following query:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"{\n  SensorMaxTemp {\n    sensorid\n    maxTemp\n  }\n}\n")),(0,r.yg)("h2",{id:"subscription"},"Realtime Updates with Subscriptions"),(0,r.yg)("p",null,"DataSQRL supports GraphQL subscription, so we can push processed data to the user in realtime instead of the user having to query for it. This is useful when we want to update dashboards with new metrics automatically and in realtime."),(0,r.yg)("p",null,"Let's add an alert when the temperature of a sensor exceeds 50\xb0. First, we add the ",(0,r.yg)("inlineCode",{parentName:"p"},"HighTempAlert")," table to our script:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql",metastring:"title=metrics.sqrl",title:"metrics.sqrl"},"HighTempAlert := SELECT * FROM SecReading WHERE temp > 50;\n")),(0,r.yg)("p",null,"Open the ",(0,r.yg)("inlineCode",{parentName:"p"},"schema.graphqls")," file and add the following subscription and type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql",metastring:"title=schema.graphqls",title:"schema.graphqls"},"type Subscription {\n    HighTempAlert(sensorid: Int): HighTempAlert\n}\n\ntype HighTempAlert {\n    sensorid: Int!\n    timeSec: String!\n    temp: Float!\n}\n")),(0,r.yg)("p",null,"Terminate and rerun the pipeline:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose down -v)\n")),(0,r.yg)(i.A,{groupId:"cli",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Mac",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"sqrl compile metrics.sqrl schema.graphqls\n"))),(0,r.yg)(l.A,{value:"Docker",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"docker run -it -v $PWD:/build datasqrl/cmd compile metrics.sqrl schema.graphqls\n")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"(cd build/deploy; docker compose up --build -d)\n")),(0,r.yg)("p",null,"This allows users of our API to subscribe to the ",(0,r.yg)("inlineCode",{parentName:"p"},"HighTempAlert")," table with an optional ",(0,r.yg)("inlineCode",{parentName:"p"},"sensorid")," argument to only receive alerts for a particular sensor. Whenever a sensor reading exceeds 50\xb0, the user will be immediately notified."),(0,r.yg)("p",null,"Open two browser windows and navigate to ",(0,r.yg)("a",{parentName:"p",href:"http://localhost:8888//graphiql/"},(0,r.yg)("inlineCode",{parentName:"a"},"http://localhost:8888/graphiql/"))," so you can see them both."),(0,r.yg)("p",null,"On one, start the graphql subscription:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"subscription {\n  HighTempAlert(sensorid: 2) {\n    sensorid\n    temp\n    timeSec\n  }\n}\n")),(0,r.yg)("p",null,"On the other, fire off a mutation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  AddReading(metric: {\n    sensorid: 2,\n    temperature: 90.5,\n    humidity: 88\n  }) {\n    sensorid\n    event_time\n  }\n}\n")),(0,r.yg)("p",null,"Wait a second and fire off a second one:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  AddReading(metric: {\n    sensorid: 2,\n    temperature: 95.5,\n    humidity: 88\n  }) {\n    sensorid\n    event_time\n  }\n}\n")),(0,r.yg)("p",null,"Voila, we just built a fully-functioning monitoring service that ingests, aggregates, and serves metrics data in realtime with push-based alerts. And the best part? The DataSQRL compiler ensures that it is efficient, fast, robust, and scalable."))}g.isMDXComponent=!0}}]);