"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7987],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(8168),a=(n(6540),n(5680));const o={title:"Vector Functions"},i="Text Functions",c={unversionedId:"reference/sqrl/functions/vector",id:"reference/sqrl/functions/vector",title:"Vector Functions",description:"The vector function package contains functions for creating and comparing vectors.",source:"@site/docs/reference/sqrl/functions/vector.md",sourceDirName:"reference/sqrl/functions",slug:"/reference/sqrl/functions/vector",permalink:"/docs/reference/sqrl/functions/vector",draft:!1,editUrl:"https://github.com/DataSQRL/datasqrl.github.io/edit/main/docs/reference/sqrl/functions/vector.md",tags:[],version:"current",frontMatter:{title:"Vector Functions"},sidebar:"docs",previous:{title:"JSON Functions",permalink:"/docs/reference/sqrl/functions/json"},next:{title:"Implement Custom Functions",permalink:"/docs/reference/sqrl/functions/custom-functions"}},l={},s=[{value:"Reference",id:"reference",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"text-functions"},"Text Functions"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vector")," function package contains functions for creating and comparing vectors."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"IMPORT vector.*; -- imports all functions\nIMPORT vector.toJson; -- imports single function\n")),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Function Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"OnnxEmbed(String text, String modelPath)")),(0,a.yg)("td",{parentName:"tr",align:null},"Embeds the given text using an ONNX model specified by the model path. This function handles text tokenization, tensor creation, and model inference, returning a ",(0,a.yg)("inlineCode",{parentName:"td"},"FlinkVectorType")," representing the embedded text vector. Example: ",(0,a.yg)("inlineCode",{parentName:"td"},'onnxEmbed("Sample text for embedding.", "/path/to/model.onnx")')," processes the text through the ONNX model.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CosineSimilarity(FlinkVectorType vectorA, FlinkVectorType vectorB)")),(0,a.yg)("td",{parentName:"tr",align:null},"Calculates the cosine similarity between two vectors. This is a common operation in many vector space models in machine learning, especially useful in text analytics to find the similarity between documents. Example: ",(0,a.yg)("inlineCode",{parentName:"td"},"cosineSimilarity(vector1, vector2)")," returns the cosine similarity score.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CosineDistance(FlinkVectorType vectorA, FlinkVectorType vectorB)")),(0,a.yg)("td",{parentName:"tr",align:null},"Computes the cosine distance between two vectors, which is ",(0,a.yg)("inlineCode",{parentName:"td"},"1 - cosineSimilarity"),". This function is used to measure how different two vectors are. Example: ",(0,a.yg)("inlineCode",{parentName:"td"},"cosineDistance(vector1, vector2)")," gives a measure of the distance between two vectors.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"EuclideanDistance(FlinkVectorType vectorA, FlinkVectorType vectorB)")),(0,a.yg)("td",{parentName:"tr",align:null},"Calculates the Euclidean distance between two vectors, a direct measure of the distance in the vector space. Example: ",(0,a.yg)("inlineCode",{parentName:"td"},"euclideanDistance(vector1, vector2)")," computes the distance, useful in clustering and other machine learning algorithms that rely on distance calculations.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AsciiTextTestEmbed(String text)")),(0,a.yg)("td",{parentName:"tr",align:null},"Generates a simple embedding of the text based on ASCII values. This simplistic approach can sometimes serve for quick tests or baseline embeddings in scenarios where text length or uniqueness is a factor. Example: ",(0,a.yg)("inlineCode",{parentName:"td"},'asciiTextTestEmbed("Hello")')," generates a vector based on ASCII values of the text.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Center(vector)")),(0,a.yg)("td",{parentName:"tr",align:null},"Used as an aggregate function to compute the center (mean vector) of a group of vectors during aggregation operations in Flink. This function is typically used in clustering or when calculating the centroid of data points.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"DoubleToVector(double array)")),(0,a.yg)("td",{parentName:"tr",align:null},"Converts a vector to a double array")))))}u.isMDXComponent=!0}}]);