<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>DataSQRL Blog</title>
        <link>https://www.datasqrl.com/blog</link>
        <description>DataSQRL Blog</description>
        <lastBuildDate>Wed, 21 Jun 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Simplifying Apache Flink Application Development with DataSQRL]]></title>
            <link>https://www.datasqrl.com/blog/simplifying-flink-app-development</link>
            <guid>https://www.datasqrl.com/blog/simplifying-flink-app-development</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Apache Flink is an incredibly powerful stream processor. But to build a complete application with Flink you need to integrate multiple complex technologies which requires a significant amount of custom code.]]></description>
            <content:encoded><![CDATA[<p>Apache Flink is an incredibly powerful stream processor. But to build a complete application with Flink you need to integrate multiple complex technologies which requires a significant amount of custom code.
DataSQRL is an open-source tool that simplifies this process by compiling SQL into a microservice that integrates Flink, Kafka, Postgres, and API layer. DataSQRL allows you to focus on your application logic without getting bogged down in the details of how to execute your data transformations efficiently across multiple technologies.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-challenge-of-building-applications-with-flink">The Challenge of Building Applications with Flink<a href="#the-challenge-of-building-applications-with-flink" class="hash-link" aria-label="Direct link to The Challenge of Building Applications with Flink" title="Direct link to The Challenge of Building Applications with Flink">​</a></h2><p>We have built several applications in Flink: recommendation engines, data mesh endpoints, monitoring dashboards, Customer 360 APIs, smart IoT apps, and more. Across those use cases, Flink proved to be versatile and powerful in its ability to instantly analyze and aggregate data from multiple sources. But we found it quite difficult and time-consuming to build applications with Flink.</p><img loading="lazy" src="/img/reference/compiledMicroservice.svg" alt="DataSQRL compiled microservice >" width="50%" class="img_ev3q"><p>To start, you need to learn Flink: the table and datastream API, watermarking, windowing, and all the other stream processing concepts. Flink alone gets our heads spinning. And Flink is just one component of the application.</p><p>To build a complete application or microservice, you need Kafka to hold your streaming data and a database like Postgres to query the processed data. On top, you need an API layer that captures input data and provides access to the processed data. Your team must learn, implement, and integrate multiple complex technologies. It takes a village to build a Flink app.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-datasqrl-a-solution-for-streamlined-flink-development">Introducing DataSQRL: A Solution for Streamlined Flink Development<a href="#introducing-datasqrl-a-solution-for-streamlined-flink-development" class="hash-link" aria-label="Direct link to Introducing DataSQRL: A Solution for Streamlined Flink Development" title="Direct link to Introducing DataSQRL: A Solution for Streamlined Flink Development">​</a></h2><img loading="lazy" src="/img/full_squirrel.svg" alt="DataSQRL >" width="20%" class="img_ev3q"><p>That’s why we built <a href="/">DataSQRL</a>. DataSQRL compiles the SQL that defines your data processing into an integrated microservice that orchestrates Flink, Kafka, Postgres, and API - saving us a ton of time and headache in the process. Why not let the computer do all the hard work?</p><p>Let me show you how DataSQRL works by building an IoT monitoring service.</p><p>First, we implement the data processing for our monitoring service in SQL.</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">metrics.sqrl</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> datasqrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">example</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sensors</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SensorReading</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- Import sensor data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">endOfSecond</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">-- Import time function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Aggregate sensor readings to second */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SecReading :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> endOfSecond</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> timeSec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     </span><span class="token function" style="color:rgb(80, 250, 123)">avg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">temp</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> SensorReading</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timeSec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Get max temperature in last minute */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SensorMaxTemp :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> maxTemp</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> SecReading</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> timeSec </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">now</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INTERVAL</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">MINUTE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This script imports the metrics stream which are temperature readings collected by sensors. DataSQRL treats external data sources like software dependencies that you import, allowing the compiler to handle configuration management, data mapping, and schema evolution for us. We also import a time function we’ll use for aggregation.</p><p>Then we define two tables: The first table smoothes out the readings by taking the average temperature each second. The SensorMaxTemp table computes the maximum temperature for each sensor over the last minute.</p><p>Next, we are going to define the API for our monitoring service.  That’s how users of our service query the data.
The API is defined by a GraphQL schema. It specifies the query endpoints and result types.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">metricsapi.graphqls</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">SecReading</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token attr-name" style="color:rgb(241, 250, 140)">sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">SecReading</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">SensorMaxTemp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token attr-name" style="color:rgb(241, 250, 140)">sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">SensorMaxTemp</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">SecReading</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">timeSec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Float</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">SensorMaxTemp</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">sensorid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(241, 250, 140)">maxTemp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token scalar">Float</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note, how the tables map to query endpoints and types. That’s how it all fits together.</p><p>And don’t worry, you don’t have to write this schema - DataSQRL can generate it for you from the SQL script.</p><p>DataSQRL compiles the script and GraphQL schema into an integrated microservice with the following command:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> run --rm -v </span><span class="token environment constant" style="color:rgb(189, 147, 249)">$PWD</span><span class="token plain">:/build datasqrl/cmd compile metrics.sqrl metricsapi.graphqls</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It also generates a docker-compose template to stand up the entire service.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cd build/deploy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> compose up</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We can now interact with the API and try it out by opening <a href="http://localhost:8888/graphiql/" target="_blank" rel="noopener noreferrer">http://localhost:8888/graphiql/</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="datasqrl-does-the-work-for-you">DataSQRL Does the Work for You<a href="#datasqrl-does-the-work-for-you" class="hash-link" aria-label="Direct link to DataSQRL Does the Work for You" title="Direct link to DataSQRL Does the Work for You">​</a></h2><p>Pretty simple, right? And the best part is that DataSQRL compiles deployment artifacts for each component that you can inspect and deploy anywhere. There is no magic or black box.
For example, DataSQRL compiles a Flink jar you can execute on an existing Flink cluster or Flink managed service.</p><p>Most importantly, consider all the work we didn’t have to do. No data source configuration, watermark setting, Kafka integration, database schema definition, index structure selection, API implementation, and so on. DataSQRL compiles all that for you.</p><p>DataSQRL also supports inserts to ingest events, subscriptions to push data updates in real-time to the client, and exporting data to Kafka topics or downstream systems. Take a look at the <a href="/docs/getting-started/quickstart/">Quickstart tutorial</a> which shows you how to do that - it only takes a few minutes.</p><p>DataSQRL is an <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">open-source project</a>. If you like the idea of DataSQRL, have questions, or need help building your streaming application, <a href="/community/">don’t hesitate to reach out</a>.</p><p>To sum up, DataSQRL is a tool for simplifying the development of Apache Flink applications by automating the integration of various technologies and allowing developers to focus on their application logic. It makes Flink accessible to lazy developers like us.</p><p>Have fun building applications with Flink!</p>]]></content:encoded>
            <category>DataSQRL</category>
            <category>Flink</category>
        </item>
        <item>
            <title><![CDATA[SQRL: Enhancing SQL to a High-Level Data Language]]></title>
            <link>https://www.datasqrl.com/blog/sqrl-high-level-data-language-sql</link>
            <guid>https://www.datasqrl.com/blog/sqrl-high-level-data-language-sql</guid>
            <pubDate>Mon, 22 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[When creating data-intensive applications or services, your data logic (i.e. the code that defines how to process the data) gets fragmented across multiple data systems, languages, and mental models. This makes data-driven applications difficult to implement and hard to maintain.]]></description>
            <content:encoded><![CDATA[<p>When creating data-intensive applications or services, your data logic (i.e. the code that defines how to process the data) gets fragmented across multiple data systems, languages, and mental models. This makes data-driven applications difficult to implement and hard to maintain.</p><p>SQRL is a high-level data programming language that compiles into executables for all your data systems, so you can implement your data logic in one place. SQRL adds support for data streams and relationships to SQL while maintaining its familiar syntax and semantics.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-we-need-sqrl">Why Do We Need SQRL?<a href="#why-do-we-need-sqrl" class="hash-link" aria-label="Direct link to Why Do We Need SQRL?" title="Direct link to Why Do We Need SQRL?">​</a></h2><img loading="lazy" src="/img/reference/reactive_data_layer.svg" alt="Data Layer of data-driven application >" width="30%" class="img_ev3q"><p>The data layer of a data-driven application comprises multiple components: There’s the good ol’ database for data storage and queries, a server for handling incoming data and translating API requests into database queries, a queue/log for asynchronous data processing, and a stream processor for pre-processing and writing new data to the database. Consequently, your data processing code becomes fragmented across various systems, technologies, and languages.</p><p>For example, consider a project I was once working on. We were building a data service integrating customer data from various silos into a data API for a mobile app. The objective was to provide customers with an integrated view of their service and billing history, support requests, profile information, etc. This is a typical "Customer 360°" challenge many large organizations face when customer data is spread across numerous operational systems.</p><p>The data layer of that service consisted of a bunch of scripts ingesting customer data from CDC (change-data-capture) streams, a SQL database for data persistence, and a Java-based API server.</p><p>The data logic of this application was trivial: some translation of billing codes and aggregation of service items, but mostly it was straight-forward mapping of data. Yet, it took the team multiple months to build a prototype because of all the code fragmentation and glue code we had to write to stitch the components together. Integration testing was a big pain. And a simple sprint ticket to add a customer field took a week to implement and test.</p><img loading="lazy" src="/img/blog/tower-of-babel.jpg" alt="The Tower of Babel >|" width="35%" class="img_ev3q"><p>The worst part was all the miscommunication. See, each component of the data layer has a different mental model.
For the data ingestion and pre-processing, the developers thought in terms of events and streams. For the database modeling and querying, the developers thought in terms of rows and tables. And for the API implementation, the developers thought in terms of objects and classes.</p><p>It felt like we were building the Tower of Babel. Everybody was speaking a different language and we couldn’t understand each other. But with a twist: We thought we understood each other until it was time to integrate the components and we discovered a mismatch in how we represented the data. That’s a type of punishment not even a jealous God will dish out.</p><p>To save ourselves from this tedious work and mental gymnastics, we built SQRL as a high-level data programming language for implementing the data logic of your application in one place.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-sqrl">Introducing SQRL<a href="#introducing-sqrl" class="hash-link" aria-label="Direct link to Introducing SQRL" title="Direct link to Introducing SQRL">​</a></h2><p>SQRL enhances SQL. If you’ve used SQL before, we hope that you find it easy to pick up SQRL. And if not, there is always ChatGPT 😜.</p><p>Let’s take a look at a SQRL script implementing a Customer 360° API that integrates and aggregates customer and order data:</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> datasqrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seedshop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> datasqrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">seedshop</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Customers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Clean orders data and compute subtotals */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">discount :</span><span class="token operator">=</span><span class="token plain"> discount?</span><span class="token number">0.0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">total    :</span><span class="token operator">=</span><span class="token plain"> quantity </span><span class="token operator">*</span><span class="token plain"> unit_price </span><span class="token operator">-</span><span class="token plain"> discount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">totals         :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">total</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> price</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                         </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">discount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> saving </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@.items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Deduplicate customer CDC stream */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Customers :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">DISTINCT</span><span class="token plain"> Customers </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> id </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">DESC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Create relationship between Customers and Orders */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Customers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">purchases :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Orders </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">customerid </span><span class="token operator">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@.id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Aggregate customer spending by state */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Customers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">spending :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">t</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">price</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> spend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                             </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">t</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">saving</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> saved</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@.purchases.totals</span><span class="token plain"> t </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This script imports customer data and order streams. It processes data in multiple steps, culminating in an aggregated spending analysis by state.</p><p>And that’s all you have to implement to get a functioning customer 360° API. DataSQRL compiles this script into executables for all your data systems and handles data mapping and schema synchronization between them.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sqrl-features-overview">SQRL Features Overview<a href="#sqrl-features-overview" class="hash-link" aria-label="Direct link to SQRL Features Overview" title="Direct link to SQRL Features Overview">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="simple-syntax">Simple Syntax<a href="#simple-syntax" class="hash-link" aria-label="Direct link to Simple Syntax" title="Direct link to Simple Syntax">​</a></h3><p>The first thing you notice is the syntactic sugar that SQRL adds to SQL.</p><p>It allows you to define the data sources that you are importing into your script so that a package manager can handle data access configuration and schema management.</p><p>It uses the <code>:=</code> assignment operator to define new tables and allows incremental column definitions.</p><p>The goal is to make SQRL feel a little more like a development language where you build your data logic as a sequence of small, incremental steps instead of writing one massive query.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="nested-data">Nested Data<a href="#nested-data" class="hash-link" aria-label="Direct link to Nested Data" title="Direct link to Nested Data">​</a></h3><p>Nested data, like JSON documents, is ubiquitous in data-driven applications. It’s how we exchange data. It’s how we expose data in APIs.</p><p>SQRL provides native support for nested data by representing it as child tables, accessed through the familiar "." dot notation.</p><p>In the example, we sum up the price and saving for all items in an order:</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">totals :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">total</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> price</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">sum</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">discount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> saving </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@.items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>There are a couple of things happening here:</p><ul><li>We define a new nested table in <code>Orders</code> called <code>totals</code> that contains the aggregates</li><li>The <code>FROM</code> clause <code>@.items</code> selects the items from <strong>each</strong> order. The special table handle <code>@</code> refers to the parent table in the local context, i.e. <code>Orders</code> in this example.</li></ul><p>Being able to write queries within a nested context makes it possible to process tree-structured data within SQL.</p><p>For example, when we define the <code>totals</code> column for each item in an order, we can refer to the other columns of <code>items</code> within the local context:</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">total :</span><span class="token operator">=</span><span class="token plain"> quantity </span><span class="token operator">*</span><span class="token plain"> unit_price </span><span class="token operator">-</span><span class="token plain"> discount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Nested data support simplifies data consumption from external sources and result data mapping to API calls, eliminating a significant amount of mapping and data transformation code.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="relationships">Relationships<a href="#relationships" class="hash-link" aria-label="Direct link to Relationships" title="Direct link to Relationships">​</a></h3><p>SQRL adds relationships to SQL. You can define relationship columns on tables that relate to rows in other tables using the familiar JOIN syntax.</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Customers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">purchases :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Orders </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> Orders</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">customerid </span><span class="token operator">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@.id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Making relationships explicit in SQL simplifies joins and adds structure to the data that is exposed in the API without separate mapping logic.</p><p>For example, the <code>FROM</code> clause of the spending analysis query uses the relationship expression <code>@.purchases.totals</code> to select from the nested <code>totals</code> table of the purchase orders for each customer. It eliminates a double-join and makes the query easier to read.</p><p>Support for relationships and nested data makes it convenient to handle inter-related data and bridges the gap between the relational data model and the tree or object-relationship structure we use in our APIs and applications.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="stream-processing">Stream Processing<a href="#stream-processing" class="hash-link" aria-label="Direct link to Stream Processing" title="Direct link to Stream Processing">​</a></h3><img loading="lazy" src="/img/blog/data_stream.jpg" alt="Matrix Data Stream >|" width="40%" class="img_ev3q"><p>SQRL introduces support for stream tables to ingest external data streams and react to data changes. Data streams are an important part of data-driven applications. It’s how we consume data from other systems or applications and communicate changes in data to subscribers.</p><p>Unlike normal SQL tables where records can change over time, a stream table has immutable records that are fixed in time. As we saw with the orders stream in our example, SQRL makes it easy to process stream data in steps.</p><p>SQRL has operators to convert between stream tables and state tables. Our customer 360° script uses the <code>DISTINCT</code> operator to convert a CDC stream into a state table. The <code>STREAM</code> operator creates a change stream from a state table, so you can react to changes in state.</p><p>In addition, SQRL overloads the <code>JOIN</code> operator to support time-consistent joins between state and stream tables. For example, consider the join between the <code>Customers</code> and <code>Orders</code> tables in the spending analysis query. We want to join the <code>Orders</code> stream with the state of the <code>Customers</code> table <strong>at the time</strong> of a particular order, so that we aggregate by the state that the customer lived in when the order was placed. If we had used an <code>INNER JOIN</code>, the state would update every time the customer moved and the query would aggregate all orders under the state the customer currently lives in.</p><p>Making stream tables a first-class citizen in SQL allows us to process stream data, react to changes in data, and bridge the mental model between the set semantics of the relational world and the event orientation of streams.</p><p>Take a look at the <a href="/docs/getting-started/intro/sqrl/">documentation</a> for a more detailed rundown of all the features SQRL adds to SQL.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="help-us-design-sqrl">Help Us Design SQRL<a href="#help-us-design-sqrl" class="hash-link" aria-label="Direct link to Help Us Design SQRL" title="Direct link to Help Us Design SQRL">​</a></h2><p>To take SQRL for a spin and learn how to build data-driven applications, we recommend you start with the <a href="/docs/getting-started/quickstart/">Quickstart tutorial</a>. If you have questions, we are happy to answer them on <a href="https://discord.gg/49AnhVY2w9" target="_blank" rel="noopener noreferrer">our Discord</a>.</p><p>SQRL is still young, and we would love to hear <a href="https://discord.gg/49AnhVY2w9" target="_blank" rel="noopener noreferrer">your feedback</a> on the language to shape its future.</p>]]></content:encoded>
            <category>SQRL</category>
            <category>community</category>
        </item>
        <item>
            <title><![CDATA[Let's Uplevel Our Database Game: Meet DataSQRL]]></title>
            <link>https://www.datasqrl.com/blog/lets-uplevel-database-datasqrl</link>
            <guid>https://www.datasqrl.com/blog/lets-uplevel-database-datasqrl</guid>
            <pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We need to make it easier to build data-driven applications. Databases are great if all your application needs is storing and retrieving data. But if you want to build anything more interesting with data - like serving users recommendations based on the pages they are visiting, detecting fraudulent transactions on your site, or computing real-time features for your machine learning model - you end up building a ton of custom code and infrastructure around the database.]]></description>
            <content:encoded><![CDATA[<p><strong>We need to make it easier to build data-driven applications.</strong> Databases are great if all your application needs is storing and retrieving data. But if you want to build anything more interesting with data - like serving users recommendations based on the pages they are visiting, detecting fraudulent transactions on your site, or computing real-time features for your machine learning model - you end up building a ton of custom code and infrastructure around the database.</p><a href="https://www.youtube.com/watch?v=m5uYtBFSmUs&amp;ab_channel=DataSQRL" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="/img/blog/uplevel_play_image.jpg" alt="Watch the video version >|" width="50%" class="img_ev3q"></a><p>You need a queue like Kafka to hold your events, a stream processor like Flink to process data, a database like Postgres to store and query the result data, and an API layer to tie it all together.</p><p>And that’s just the price of admission. To get a functioning data layer, you need to make sure that all these components talk to each other and that data flows smoothly between them. Schema synchronization, data model tuning, index selection, query batching … all that fun stuff.</p><p>The point is, you need to do a ton of data plumbing if you want to build a data-driven application. All that data plumbing code is time-consuming to develop, hard to maintain, and expensive to operate.</p><p>We need to make building with data easier. That’s why we are sending out this call to action to uplevel our database game. <strong>Join us in figuring out how to simplify the data layer.</strong></p><p>We have an idea to get us started: Meet DataSQRL.</p><img loading="lazy" src="/img/full_squirrel.svg" alt="DataSQRL >" width="30%" class="img_ev3q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-datasqrl">Introducing DataSQRL<a href="#introducing-datasqrl" class="hash-link" aria-label="Direct link to Introducing DataSQRL" title="Direct link to Introducing DataSQRL">​</a></h2><p>DataSQRL is a build tool that compiles your application’s data layer from a high-level data development language, dubbed SQRL.</p><p>Our goal is to create a new abstraction layer above the low-level languages often used in data layers, allowing a compiler to handle the tedious tasks of data plumbing, infrastructure assembly, and configuration management.</p><p>Much like how you use high-level languages such as Javascript, Python, or Java instead of Assembly for software development, we believe a similar approach should be used for data. </p><p>SQRL is designed to be a developer-friendly version of SQL, maintaining familiar syntax while adding features necessary for building data-driven applications, like support for nested data and data streams.</p><p>Check out this simple SQRL script to build a recommendation engine from clickstream data.</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">IMPORT</span><span class="token plain"> datasqrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">example</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">clickstream</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Click</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">-- Import data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Find next page visits within 10 minutes */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">VisitAfter :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> beforeURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> afterURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> Click b </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">JOIN</span><span class="token plain"> Click a </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ON</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid</span><span class="token operator">=</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">userid </span><span class="token operator">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token operator">&lt;=</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token operator">AND</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">timestamp</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INTERVAL</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">MINUTE</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* Recommend pages that are visited shortly after */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Recommendation :</span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> beforeURL </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> afterURL </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> rec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                         </span><span class="token function" style="color:rgb(80, 250, 123)">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> frequency </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> VisitAfter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> rec </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">BY</span><span class="token plain"> url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">ASC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> frequency </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">DESC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This little SQRL script imports clickstream data, identifies pairs of URLs visited within a 10-minute interval, and compiles these pairs into a set of recommendations, ordered by the frequency of co-visits.</p><img loading="lazy" src="/img/reference/reactive_data_layer.svg" alt="Reactive Data Layer Compiled by DataSQRL >" width="30%" class="img_ev3q"><p>DataSQRL then takes this script and compiles it into an integrated data layer, complete with all necessary data plumbing pre-installed. It configures access to the clickstream. It generates an executable for the stream processor that ingests, validates, joins, and aggregates the clickstream data. It creates the data model and writes the aggregated data to the database. It synchronizes timestamps and schemas between all the components. And it compiles a server executable that queries the database and exposes the computed recommendations through a GraphQL API.</p><p><strong>The bottom line: These 9 lines of SQRL code can replace hundreds of lines of complex data plumbing code and save hours of infrastructure setup.</strong></p><p>We believe that all this low-level data plumbing work should be done by a compiler since it is tedious, time-consuming, and error-prone. Let’s uplevel our data game, so we can focus on <strong>what</strong> we are trying to build with data and less on the <strong>how</strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on this Journey<a href="#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on this Journey" title="Direct link to Join Us on this Journey">​</a></h2><img loading="lazy" src="/img/blog/undraw_collaboration.svg" alt="Join DataSQRL Community >" width="50%" class="img_ev3q"><p>We have the ambitious goal of designing a higher level of abstraction for data to enable millions of developers to build data-driven applications.</p><p>We <a href="https://github.com/DataSQRL/sqrl/releases/tag/v0.1.0" target="_blank" rel="noopener noreferrer">just released</a> the first version of DataSQRL, and we recognize that we are at the beginning of a long, long road. We need your help. If you are a data nerd, like building with data, or wish it was easier, please <a href="/community/">join us on this journey</a>. DataSQRL is an open-source project, and all development activity is transparent.</p><p>Here are some ideas for how you can contribute:</p><ul><li>Share your thoughts: Do you have ideas on how we can improve the SQRL language or the DataSQRL compiler? Jump into <a href="https://discord.gg/49AnhVY2w9" target="_blank" rel="noopener noreferrer">our discord</a> and let us know!</li><li>Test the waters: Do you like playing with new technologies? Try out <a href="/docs/getting-started/quickstart/">DataSQRL</a> and let us know if you find any bugs or missing features.</li><li>Spread the word: Think DataSQRL has potential? Share this blog post and <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">star</a> DataSQRL on <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">Github</a>. Your support can help us reach more like-minded individuals.</li><li>Code with us: Do you enjoy contributing to open-source projects? Dive into <a href="https://github.com/DataSQRL/sqrl" target="_blank" rel="noopener noreferrer">the code</a> with us and pick up a <a href="https://github.com/DataSQRL/sqrl/issues" target="_blank" rel="noopener noreferrer">ticket</a>.</li></ul><p>Let’s uplevel our database game. With your help, we can make building with data fun and productive.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-information">More Information<a href="#more-information" class="hash-link" aria-label="Direct link to More Information" title="Direct link to More Information">​</a></h2><p>You probably have a ton of questions now. How do I import my own data? How do I customize the API? How do I deploy SQRL scripts to production? How do I import functions from my favorite programming language?</p><p>Those are all great questions. Check out <a href="/">datasqrl.com</a> for answers, <a href="/community/">join the community</a> to ask us, or wait for a future blog post where we dive into all of those topics.</p>]]></content:encoded>
            <category>DataSQRL</category>
            <category>community</category>
        </item>
        <item>
            <title><![CDATA[DataSQRL 0.1: A SQRL is born]]></title>
            <link>https://www.datasqrl.com/blog/datasqrl-01-release</link>
            <guid>https://www.datasqrl.com/blog/datasqrl-01-release</guid>
            <pubDate>Thu, 11 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[After two long years of research, development, and teamwork, we're excited to announce DataSQRL 0.1! DataSQRL is a tool for building APIs from your data streams and datasets by defining your use case in an SQL.]]></description>
            <content:encoded><![CDATA[<p>After two long years of research, development, and teamwork, we're excited to announce DataSQRL 0.1! <a href="/">DataSQRL</a> is a tool for building APIs from your data streams and datasets by defining your use case in an SQL.</p><img loading="lazy" src="/img/blog/datasqrlv0.1.jpeg" alt="DataSQRL v0.1 release: A SQRL is Born >" width="40%" class="img_ev3q"><p>This is our first “official” release of DataSQRL after many months of testing and bug-fixing. <br>
Check out the <a href="https://github.com/DataSQRL/sqrl/releases/tag/v0.1.0" target="_blank" rel="noopener noreferrer">release notes</a> on GitHub for a rundown of all the features.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-vision">Our Vision<a href="#our-vision" class="hash-link" aria-label="Direct link to Our Vision" title="Direct link to Our Vision">​</a></h2><p>Every time we wanted to build a new use case for our application and expose a data API, we found ourselves getting distracted. Distracted by all the orchestration, the technology choices, all the micro-decisions, and the 'plumbing' that goes into the modern data layer. So we up-leveled the abstraction and kept it simple. We <a href="/docs/getting-started/concepts/why-datasqrl/">designed DataSQRL</a> to handle those nitty-gritty details, so you could stay focused on what truly mattered - building cool things.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="simplicity-through-sql">Simplicity Through SQL<a href="#simplicity-through-sql" class="hash-link" aria-label="Direct link to Simplicity Through SQL" title="Direct link to Simplicity Through SQL">​</a></h2><p>We've kept <a href="/docs/getting-started/concepts/datasqrl/">DataSQRL true to SQL</a>, so it feels familiar and easy to use. We enhanced and modernized the language while maintaining the simplicity of SQL queries. No more wrestling with subqueries, window functions, or repetitive joins - just straightforward SQL.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="flexible-apis">Flexible APIs<a href="#flexible-apis" class="hash-link" aria-label="Direct link to Flexible APIs" title="Direct link to Flexible APIs">​</a></h2><p>One size doesn't fit all when it comes to APIs. We made DataSQRL non-opinionated, giving you the freedom to use your <a href="/docs/reference/api/graphql/design/">preferred GraphQL schema</a> and customize your query patterns with SQRL scripts.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-road-ahead">Our Road Ahead<a href="#our-road-ahead" class="hash-link" aria-label="Direct link to Our Road Ahead" title="Direct link to Our Road Ahead">​</a></h2><p>We're seeking <a href="/community/">your feedback</a> to help shape the future of DataSQRL. Our current architecture supports a range of platforms, and we're working on making it more extensible and useful. Your input is invaluable as we continue to refine and expand DataSQRL's capabilities.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><p>The only danger now is that your boss might think he can start coding again. <a href="/community/">Join us</a> as we explore the story behind DataSQRL, its impact on the world of data processing, and the exciting possibilities it holds for the future.</p>]]></content:encoded>
            <category>DataSQRL</category>
            <category>release</category>
        </item>
        <item>
            <title><![CDATA[The Two Core Data Problems for Developers: Transactional & Reactive]]></title>
            <link>https://www.datasqrl.com/blog/types-of-data-problems-transactional-reactive</link>
            <guid>https://www.datasqrl.com/blog/types-of-data-problems-transactional-reactive</guid>
            <pubDate>Mon, 01 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2><p>Every developer, whether you build applications or backend services, encounters two distinct types of data problems: transactional and reactive. The need to store and retrieve application state is a quintessential example of a transactional data problem. Conversely, when you're processing events or consuming data from external sources, you're confronted with a reactive data problem. </p><p>Knowing which problem you're up against is crucial to selecting the right tools from your developer's kit. It’s important to determine what type of data problem you are dealing with to choose the right tools and approaches for implementing a solution. After all, using a hammer for a screw job can leave you with more than a few cracks to mend.</p><p>In this post, we'll guide you on how to differentiate between transactional and reactive data problems and pick the right tools and strategies to solve each of them.</p><p>Table of Contents:</p><ul><li><a href="#pitfall">The Pitfall of Misinterpreting Reactive Problems as Transactional</a></li><li><a href="#what-tx">What are Transactional Data Problems?</a></li><li><a href="#solve-tx">Solving Transactional Data Problems</a></li><li><a href="#what-rx">What are Reactive Data Problems?</a></li><li><a href="#solve-rx">Solving Reactive Data Problems</a></li><li><a href="#conclusion">Conclusion</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pitfall">The Pitfall of Misinterpreting Reactive Problems as Transactional<a href="#pitfall" class="hash-link" aria-label="Direct link to The Pitfall of Misinterpreting Reactive Problems as Transactional" title="Direct link to The Pitfall of Misinterpreting Reactive Problems as Transactional">​</a></h2><img loading="lazy" src="/img/blog/arrived_logo.png" alt="Arrived Logo >" width="30%" class="img_ev3q"><p>Let's kick things off with an anecdote from my career. An episode where I mistakenly treated a reactive data problem as a transactional one, resulting in a full-blown application meltdown. Definitely not a shining moment of my career.</p><p>Flashback to 2011, I was the backend developer for a sprouting startup named "Arrived". Our vision was to connect people in the real world by using their phone’s location data. That was the time when smartphones started to support geo-fencing and folks thought Foursquare was going to become the next Facebook. Fun times.</p><p>We built an iPhone app that allowed users to establish geo-fences and automatically check-in, alerting their connections upon entry. For a brief overview of the app, check out <a href="https://techcrunch.com/2011/11/10/i-am-a-passenger-and-i-arrive-and-arrived/" target="_blank" rel="noopener noreferrer">this brutally hilarious review</a> from our TechCrunch Disrupt final presentation. While it was soul-crushing at the time, it's quite a fun read in retrospect.</p><p>I implemented the backend of the application as a Java web service, complete with a REST API for user creation, user connection management, and alert dispatch. The API primarily dealt with storing and retrieving user states, connections, geo-fences, and more. These are typical transactional data problems: how to maintain your application state in a durable, reliable, and consistent way. To tackle this, I used MySQL as the database and an object-relational mapping library to translate my Java objects to database rows.</p><p>All was sailing smoothly until we decided to implement a social feature to enhance the onboarding experience and boost the app's "virality". This feature uploaded a user’s phone contacts to check if any of their contacts were already using Arrived, suggesting them as potential connections.</p><img loading="lazy" src="/img/blog/arrived_app.png" alt="Arrived Mobile App Screenshot >|" width="30%" class="img_ev3q"><p>That looked like another transactional data problem to me. Or rather, I was oblivious to the existence of other types of data problems and defaulted to it being transactional.</p><p>Thus, I embarked on a path that would eventually lead to disaster. The "upload contacts" API call I set up did the following: </p><ul><li>stored all contact entries in the database, </li><li>ran a for-loop to match any entry hashes already in the database, </li><li>added a "potential connection" record to another table in case of a match.</li></ul><p>To my credit, the feature worked as intended. I even had a passing test case. But once we launched the feature in production, our database froze.</p><p>As it turned out, some users had an expansive social circle with over a thousand contacts. Running a transaction that writes thousands of records and fires off as many read queries on your primary operational database, which also services all your API requests, is a recipe for disaster. Needless to say, the database was not a fan of this idea and promptly crashed.</p><p>But my mistake was not a coding error. The code worked fine. The mistake was failing to realize that the “contacts matching feature” was a reactive data problem, not a transactional one. We were ingesting data from an external source - a user’s contact list - and reacting to it by comparing matches against our existing user base.</p><p>In the upcoming sections, we'll delve deeper into the differences between transactional and reactive data problems and how to solve them. We'll also revisit my reactive data problem and explore how a more informed approach could have saved me from a full-blown, hair-on-fire database crisis.</p><p>We will discuss how I could have solved my reactive data problem better and avoided a hair-on-fire database resurrection after we explore transactional and reactive data problems in more detail and how to distinguish between them.</p><p>As for "Arrived", we learned that our most active users were over-vigilant parents monitoring their children, which was not our target audience. Consequently, we had to close shop in less than two years.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-tx">What are Transactional Data Problems?<a href="#what-tx" class="hash-link" aria-label="Direct link to What are Transactional Data Problems?" title="Direct link to What are Transactional Data Problems?">​</a></h2><p>Transactional data problems arise when you need to store and retrieve data concurrently while maintaining consistency. Here, "concurrently" refers to the simultaneous reading and writing of data by multiple threads or users. The trick is to ensure that data remains consistent throughout this flurry of updates.</p><p>There are two forms of inconsistencies we need to avoid. The first relates to upholding application constraints. For instance, if a username is required to be unique, we cannot allow two user records with identical usernames. This would be inconsistent with our application's unique username constraint. We may have several such constraints, like "account balances can't be negative," or "each product id in the orders table must correspond to an existing row in the product table."</p><p>The second inconsistency type relates to multiple updates triggered by a single request. We want to dodge situations where only some updates are stored. It's an all-or-nothing game - we either want all updates to be stored or none at all. For example, a request to transfer $100 from account A to account B requires updating both account balances. If only account A's balance is updated while account B's update fails, we've got a magical disappearing act of money.</p><p>Ensuring data consistency while managing concurrent user updates can be quite a challenge. You might encounter scenarios where two users try to register with the same username simultaneously or two users attempt to withdraw from the same account, causing the balance to plummet below zero. Situations like these are why data storage and retrieval often turn into a "problem" for developers.</p><p>Transactional data problems typically surface when storing state for applications that multiple users can access concurrently, or when building CRUD APIs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="solve-tx">Solving Transactional Data Problems<a href="#solve-tx" class="hash-link" aria-label="Direct link to Solving Transactional Data Problems" title="Direct link to Solving Transactional Data Problems">​</a></h2><p>The panacea for transactional data problems? Databases. Developers harness the power of databases to efficiently handle the concurrency and consistency issues associated with transactional data problems.</p><p>However, databases aren't one-size-fits-all. They differ in the types of consistency and concurrency guarantees they offer. If you're using any of the popular relational databases (like Postgres, MySQL, SqlServer, Oracle, and Aurora), breathe easy. They're likely equipped with all the support you need. For other databases, it's worth checking what exactly they support to avoid surprises down the line.</p><p>Alongside the choice of database, you'll also want to equip yourself with a tool that simplifies interactions with the database from your programming language. Wrestling with databases directly can be cumbersome, requiring the use of drivers, query string writing, and data mapping. If you're working in an object-oriented programming language, an object-relational mapping layer (or ORM for short) can be your best friend, translating seamlessly between your application and the database. If not, seek out an SDK or database abstraction layer that's compatible with your chosen database.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-rx">What are Reactive Data Problems?<a href="#what-rx" class="hash-link" aria-label="Direct link to What are Reactive Data Problems?" title="Direct link to What are Reactive Data Problems?">​</a></h2><p>You have a Reactive data problem when your data source is outside your application or service's control, and you're required to respond to the data quickly. Let’s break this down.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="unconstrained-data">Unconstrained Data<a href="#unconstrained-data" class="hash-link" aria-label="Direct link to Unconstrained Data" title="Direct link to Unconstrained Data">​</a></h3><p>When the data originates from an external source or isn't subject to any application constraints, your application does not control the data source. External data sources could include other systems like logs, message queues, files, external databases, or applications. Here, the data pre-exists independently of your control. For instance, a user's contact list is an external data source.</p><p>Moreover, data could be uncontrolled even within your application, provided it's free of any constraints. This includes events that occur organically within your application, such as a user clicking a button or visiting a webpage. These events aren't within your direct control - they just happen.</p><p>This is a stark contrast to transactional data problems, where the key challenge lies in maintaining data consistency amidst concurrent updates.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-need-for-speed">The Need for Speed<a href="#the-need-for-speed" class="hash-link" aria-label="Direct link to The Need for Speed" title="Direct link to The Need for Speed">​</a></h3><p>Another characteristic of reactive data problems is the necessity for swift data processing and result generation. This quick reaction is twofold: it must occur shortly after receiving the data, and it involves computational processing of that data.</p><p>Take the contacts matching feature in Arrived, for instance. The goal was to encourage users to establish connections during the signup process. Consequently, we had to compute the matches within a few seconds - before the user completed the signup and exited the app.</p><p>How swift does this reaction need to be to qualify as "quick"? It varies according to your use case. Customer-facing use cases typically demand reactions within seconds to minutes, tops. For use cases like fraud detection, system automation, or financial transactions, you may need to respond within milliseconds. If the results can wait for hours or even days, it wouldn't qualify as quick.</p><p>The "reaction" element primarily involves generating a response to incoming data, which could either serve back to the user or trigger an action. This could mean processing a user's shopping cart to suggest other products they might like, analyzing system metrics to detect potential overload, feeding user activity into a machine learning model for a personalized journey, or evaluating if a transaction request is fraudulent. In each instance, we take a piece of data, evaluate it within the application context, and produce a useful response.</p><p>In essence, reactive data problems call for quick, efficient responses to one or multiple data sources. The challenges arise from the need to carry out data-intensive computations rapidly, efficiently, and robustly.</p><p>Reactive data problems commonly crop up in use cases such as:</p><ul><li>Personalization or recommendation engines</li><li>User experience features</li><li>Metrics or time-series analysis</li><li>Machine learning features</li><li>Fraud detection</li><li>Cybersecurity and intrusion detection</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="solve-rx">How do you solve Reactive Data Problems?<a href="#solve-rx" class="hash-link" aria-label="Direct link to How do you solve Reactive Data Problems?" title="Direct link to How do you solve Reactive Data Problems?">​</a></h2><p>Let's circle back to the reactive data problem of the contacts matching feature. My initial solution involved splitting the transaction into several parts, moving some computation to a background thread, fine-tuning the database schema, and writing a hefty amount of SQL. This strategy was time-consuming, fragile, and a nightmare to maintain. A colleague shrugged it off with “I’ve no idea what’s happening here, but I guess it works…”</p><p>The problem? When all you have is a hammer, everything looks like a nail. So, I tried hammering that screw into the wall. As expected, it was neither pretty nor productive.</p><img loading="lazy" src="/img/blog/reactive_data_layer_arrived.svg" alt="A Reactive Data Layer Architecture >" width="40%" class="img_ev3q"><p>To solve reactive data problems more effectively, we need to reimagine our data layer architecture. Let’s give our database some company by introducing additional components that make it easier to process data reactively:</p><ul><li><strong>Queue</strong>: Introducing a persisted message queue (or log) into our architecture can ease asynchronous data processing. This robust, scalable tool allows you to write incoming data to the queue and process it when resources are available, significantly simplifying multi-step data processing.</li><li><strong>Stream Processor</strong>: This is a framework dedicated to managing consecutive data processing steps, from data ingestion (reading data off the queue or from external systems) to data transformation, to writing the results to the database. This framework handles all task scheduling and execution, allowing you to focus on the actual processing logic.</li><li><strong>Server</strong>: This component accepts incoming data, writes it to the queue, and serves the processed data from the database. Acting as the entry and exit point for the reactive data layer, the server brings everything together. You can integrate this functionality into an existing API server implementation or create a standalone server to isolate the reactive data use case into its own backend service.</li></ul><p>To improve the contact matching feature, we finally adopted a reactive data architecture as illustrated in the diagram above. Here's how the data flowed:</p><ol><li>The server received the submitted contacts and wrote the entire data blob to a persisted messaging queue.</li><li>Three asynchronous tasks ran in the processing framework:<ol><li><em>Splitter</em>: This task read an entire contacts list from the queue, divided it into chunks of a maximum of 50 contacts, and wrote the resulting chunks back to the queue under a different topic.</li><li><em>Storer</em>: This task read contact chunks from the queue and wrote the contact entries as individual records to the database.</li><li><em>Matcher</em>: This task read contact chunks, matched the contact entries against the user table, and wrote the found matches to the database.</li></ol></li><li>The database stored contact entries and contact matches in a separate logical database, isolated from the main operational database serving the CRUD API of the Arrived app.</li><li>The server responded to "recommended contacts" requests during the signup process by running a query against the database that combined all pre-computed matches for the user with matches from checking the user's phone number against previously stored contact entries.</li></ol><p>This solution was not only efficient and robust but also easier to maintain. Above all, it allowed us to concentrate on enhancing the feature instead of hacking around the database.</p><p>So, here's the key takeaway: instead of grappling with reactive data problems using a database alone, build a reactive data layer. It will save you considerable time and frustration.</p><p>If building a custom data layer seems intimidating, consider checking out DataSQRL. It's a tool that constructs reactive data layers for you. We've been developing DataSQRL to assist developers in resolving reactive data problems quickly and efficiently. We would love to hear your feedback!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><table><thead><tr><th>Type of Data Problem</th><th>Transactional</th><th>Reactive</th></tr></thead><tbody><tr><td>Response time expectation</td><td>Milliseconds</td><td>Milliseconds to minutes</td></tr><tr><td>Main challenge</td><td>Consistency under concurrency</td><td>Quick Reactions</td></tr><tr><td>Source of Data</td><td>Maintained by application</td><td>External or events</td></tr><tr><td>Consistency Requirements</td><td>Data constraints &amp; atomicity</td><td>Synchronization in time</td></tr><tr><td><strong>Data Layer Solution</strong></td><td><strong>Database + ORM</strong></td><td><strong>Queue + Processor + Database + Server</strong></td></tr></tbody></table><p>Transactional data problems arise when your application requires concurrent storage and retrieval of consistent data. On the other hand, reactive data problems occur when your application needs to quickly respond to data from external sources or events. Recognizing the distinction between these two types of data issues is crucial to implementing the most effective solution.</p><p>For transactional data problems, a data layer comprising a database and an Object-Relational Mapping (ORM) tool is often the best solution. On the contrary, reactive data problems are more efficiently addressed with a data layer that includes a queue, stream processor, database, and server. Understanding these distinctions and applying the appropriate solutions can significantly improve the efficiency and robustness of your data layer.</p>]]></content:encoded>
            <category>data</category>
        </item>
        <item>
            <title><![CDATA[Hello, World!]]></title>
            <link>https://www.datasqrl.com/blog/welcome</link>
            <guid>https://www.datasqrl.com/blog/welcome</guid>
            <pubDate>Thu, 26 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[" width="40%"/>]]></description>
            <content:encoded><![CDATA[<img loading="lazy" src="/img/generic/undraw_launch.svg" alt="Launching DataSQRL >" width="40%" class="img_ev3q"><p>We are excited to launch <a href="/about/">DataSQRL</a> with the mission to help developers and organizations build with data.</p><p>Collectively, we have spent decades building or helping others build data services. We have seen many struggles, failures, and piles of money being thrown out the window and figured that there must be a better way. We started DataSQRL to find it.</p><p>We believe that the technologies used to build data services are too complex and that the engineering processes used to build them are broken. Here is how we plan to fix these issues.</p><p>We developed <a href="/">DataSQRL</a> which  compiles a developer-friendly version of SQL into a fully integrated and optimized data pipeline and API server. It takes care of all the laborious plumbing, data massaging, and stitching together of technologies that makes building data services so harrowing. Check out <a href="/docs/getting-started/quickstart/">this short tutorial</a> to see how it works - it only takes a few minutes to build an end-to-end data service.</p><p>In addition, we are refining a value-focused process for implementing data services that we have developed over the years while working with development teams and organizations. The basic idea is to apply the same software engineering principles that have proven to be successful to implementing data services. That means you don't need a dedicated team of specialists to implement data services and can keep your customers and stakeholders in the feedback loop. <a href="/docs/process/intro/">Click here</a> to learn more about our process.</p><p>That's our starting point for enabling developers to build successful data services quickly and efficiently. We think we got some good ideas, but have been building data technologies long enough to realize that there is a fine line between innovation and wishful thinking.<br>
We hope that you will join the <a href="/community/">DataSQRL community</a> to share your experience, insights, and opinions to help set us straight.</p><p>If you are trying to enable your organization to turn data into valuable data services, consider <a href="/services/">working with us</a> and <a href="/contact/">get in touch</a>.</p><p>We are excited to be on this journey and hope you will join us. Let's build with data together.</p>]]></content:encoded>
            <category>DataSQRL</category>
        </item>
    </channel>
</rss>